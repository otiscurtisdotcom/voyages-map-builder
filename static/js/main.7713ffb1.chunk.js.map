{"version":3,"sources":["types.tsx","getContext.tsx","getSevenSeas.tsx","getIslands.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HexItems","useContext","canvasRef","useState","hexagonData","setHexagonData","ctx","setCtx","useEffect","current","getContext","rows","rowIndex","totalColumns","row","col","push","show","getBlankGrid","addSevenSeas","addStart","addDread","addIslands","addRandomStuff","drawGrid","flatSeas","getSevenSeas","flat","sevenSeas","start","dread","island","getIslands","flatGrid","BARREL","FRUIT","GEM","HIDE","SAILOR","SPICE","item","i","randomHex","Math","floor","random","length","hexItems","entries","isEvenRow","hexagon","size","Xcenter","Ycenter","beginPath","moveTo","cos","sin","lineTo","PI","strokeStyle","lineWidth","fillStyle","stroke","fill","image","Image","src","process","onload","drawImage","restore","App","useRef","canvas","className","ref","width","height","onClick","doc","jsPDF","orientation","unit","format","text","addImage","save","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7713ffb1.chunk.js","sourcesContent":["export enum HexItems {\n  BARREL = 'barrel',\n  FRUIT = 'fruit',\n  SPICE = 'spice',\n  HIDE = 'hide',\n  GEM = 'gem',\n  SAILOR = 'sailor',\n}\n\nexport interface Hexagon {\n  show: boolean,\n  sevenSeas?: boolean,\n  start?: boolean,\n  dread?: boolean,\n  island?: boolean,\n  hexItems?: HexItems,\n}","import { RefObject, useEffect, useState } from \"react\";\nimport { getIslands } from \"./getIslands\";\nimport { getSevenSeas } from \"./getSevenSeas\";\nimport { Hexagon, HexItems } from \"./types\";\n\nconst getBlankGrid = (): Hexagon[][] => {\n  const rows = [];\n  for (var rowIndex = 0; rowIndex < 21; rowIndex++) {\n    const isEvenRow = rowIndex % 2;\n    const totalColumns = isEvenRow ? 10 : 9;\n    const row = [];\n    for (let col=0; col<totalColumns; col++) {\n      const hex: Hexagon = {\n        show: true,\n      }\n      row.push(hex);\n    }\n    rows.push(row);\n  }\n  rows[0][0].show = false;\n  rows[1][0].show = false;\n  rows[0][8].show = false;\n  rows[1][9].show = false;\n  rows[19][0].show = false;\n  rows[20][0].show = false;\n  rows[19][9].show = false;\n  rows[20][8].show = false;\n  return rows;\n}\n\nexport const useContext = (canvasRef: RefObject<HTMLCanvasElement>) => {\n  const [hexagonData, setHexagonData] = useState<Hexagon[][]>();\n  const [ctx, setCtx] = useState<CanvasRenderingContext2D | null>(null);\n\n  useEffect(() => {\n    if (canvasRef.current && canvasRef.current.getContext('2d')) {\n      setCtx(canvasRef!.current.getContext('2d'));\n    }\n    setHexagonData(getBlankGrid());\n  }, []);\n\n  useEffect(() => {\n    if (hexagonData) {\n      addSevenSeas();\n      addStart();\n      addDread();\n      addIslands();\n      addRandomStuff();\n      drawGrid();\n    }\n  }, [hexagonData]);\n\n  const addSevenSeas = () => {\n    const flatSeas = getSevenSeas(hexagonData!).flat();\n    for (const seaHex of flatSeas) {\n      seaHex.sevenSeas = true;\n    }\n  }\n\n  const addStart = () => {\n    const newHexData = hexagonData;\n    newHexData![10][0].start = true;\n  }\n\n  const addDread = () => {\n    const newHexData = hexagonData;\n    newHexData![10][4].dread = true;\n  }\n\n  const addIslands = () => {\n    getIslands(hexagonData!);\n  }\n\n  const addRandomStuff = () => {\n    const numberOfItems = 3;\n    const flatGrid = hexagonData!.flat();\n\n    for (const item of [HexItems.BARREL, HexItems.FRUIT, HexItems.GEM, HexItems.HIDE, HexItems.SAILOR, HexItems.SPICE]) {  \n      for (let i=0; i<numberOfItems;) {\n        const randomHex = flatGrid[Math.floor(Math.random() * flatGrid.length)];\n        if (randomHex.show && !randomHex.hexItems && !randomHex.dread && !randomHex.island && !randomHex.start) {\n          randomHex.hexItems = item;\n          i++;\n        }\n      }\n    }\n  };\n\n  const drawGrid = () => {\n    if (ctx) {\n      for (const [rowIndex, row] of hexagonData!.entries()) {\n        const isEvenRow = rowIndex % 2;\n        const totalColumns = isEvenRow ? 10 : 9;\n        \n        for (let col=0; col<totalColumns; col++) {\n          const hexagon = row[col];\n          const numberOfSides = 6,\n          size = 25,\n          Xcenter = isEvenRow ?\n                    col * (size * 3) + size :\n                    col * (size * 3) + (size * 2.5),\n          \n          Ycenter = rowIndex * (size * 0.86) + size;\n    \n          ctx.beginPath();\n          ctx.moveTo (Xcenter + size * Math.cos(0), Ycenter +  size *  Math.sin(0));          \n    \n          for (let i = 1; i <= numberOfSides; i++) {\n            ctx.lineTo (Xcenter + size * Math.cos(i * 2 * Math.PI / numberOfSides), Ycenter + size * Math.sin(i * 2 * Math.PI / numberOfSides));\n          }\n    \n          ctx.strokeStyle = \"#000000\";\n          ctx.lineWidth = 1;\n          ctx.fillStyle = \"#33ddee\";\n    \n          if (hexagon.start) {\n            ctx.fillStyle = \"#eedd99\";\n          }\n\n          if (hexagon.sevenSeas) {\n            ctx.fillStyle = \"#99eeff\";\n          }\n          \n          if (hexagon.dread) {\n            ctx.fillStyle = \"#ff0000\";\n          }\n\n          if (hexagon.island) {\n            ctx.fillStyle = \"#ddcc33\";\n          }\n\n          if (hexagon.show) {\n            ctx.stroke();\n            ctx.fill();\n          }\n    \n          if (hexagon.hexItems) {\n            const image = new Image();\n            image.src = `${process.env.PUBLIC_URL}/${hexagon.hexItems}.png`;\n            image.onload = () => {\n              // @ts-ignore: Unreachable code error\n              ctx.drawImage(image, Xcenter - 10, Ycenter - 14, 18, 26);\n            }\n          }\n    \n          ctx.restore();\n        };\n      }\n    }\n  }\n\n  return ctx;\n}\n\nexport default useContext;\n","import { Hexagon } from \"./types\";\n\nexport const getSevenSeas = (hexagonData: Hexagon[][]) => {\n  const ssHexes = [\n    // SEA 1\n    [\n      hexagonData[0][1],\n      hexagonData[1][1],\n      hexagonData[1][2],\n      hexagonData[2][0],\n      hexagonData[3][0],\n      hexagonData[3][1],\n      hexagonData[3][2],\n      hexagonData[4][0],\n      hexagonData[5][0],\n      hexagonData[5][1],\n      hexagonData[6][0],\n    ],\n    // SEA 2\n    [\n      hexagonData[0][3],\n      hexagonData[0][4],\n      hexagonData[1][3],\n      hexagonData[1][4],\n      hexagonData[1][5],\n      hexagonData[2][4],\n      hexagonData[3][4],\n      hexagonData[4][3],\n      hexagonData[4][4],\n      hexagonData[4][5],\n    ],\n    // SEA 3\n    [\n      hexagonData[0][7],\n      hexagonData[1][7],\n      hexagonData[1][8],\n      hexagonData[2][6],\n      hexagonData[2][7],\n      hexagonData[2][8],\n      hexagonData[3][7],\n      hexagonData[3][9],\n      hexagonData[4][7],\n      hexagonData[4][8],\n      hexagonData[5][8],\n      hexagonData[6][8],\n    ],\n    // SEA 4\n    [\n      hexagonData[8][4],\n      hexagonData[9][4],\n      hexagonData[9][5],\n      hexagonData[11][4],\n      hexagonData[11][5],\n      hexagonData[12][4],\n    ],\n    // SEA 5\n    [\n      hexagonData[14][0],\n      hexagonData[15][0],\n      hexagonData[15][1],\n      hexagonData[16][0],\n      hexagonData[16][1],\n      hexagonData[17][0],\n      hexagonData[17][2],\n      hexagonData[18][0],\n      hexagonData[19][1],\n      hexagonData[19][2],\n      hexagonData[20][1],\n    ],\n    // SEA 6\n    [\n      hexagonData[16][3],\n      hexagonData[16][4],\n      hexagonData[17][4],\n      hexagonData[17][5],\n      hexagonData[18][4],\n      hexagonData[19][3],\n      hexagonData[19][4],\n      hexagonData[19][5],\n      hexagonData[20][3],\n      hexagonData[20][4],\n      hexagonData[20][5],\n    ],\n    // SEA 7\n    [\n      hexagonData[14][8],\n      hexagonData[15][8],\n      hexagonData[16][7],\n      hexagonData[16][8],\n      hexagonData[17][7],\n      hexagonData[17][8],\n      hexagonData[18][6],\n      hexagonData[18][8],\n      hexagonData[19][7],\n      hexagonData[19][8],\n      hexagonData[20][7],\n    ],\n  ];\n\n  return ssHexes;\n}","import { Hexagon } from \"./types\";\n\nexport const getIslands = (hexagonData: Hexagon[][]) => {\n  const islandHexes = [\n    // ISLAND 1A\n    hexagonData[2][1],\n    hexagonData[4][1],\n\n    // ISLAND 1B\n    hexagonData[2][3],\n\n    // ISLAND 1C\n    hexagonData[2][5],\n    hexagonData[3][5],\n\n    // ISLAND 1D\n    hexagonData[3][8],\n\n    // ISLAND 2A\n    hexagonData[11][2],\n\n    // ISLAND 2B\n    hexagonData[10][6],\n\n    // ISLAND 2C\n    hexagonData[10][8],\n\n    // ISLAND 3A\n    hexagonData[17][1],\n    hexagonData[18][1],\n\n    // ISLAND 3B\n    hexagonData[17][3],\n    hexagonData[18][3],\n\n    // ISLAND 3C\n    hexagonData[18][5],\n\n    // ISLAND 3D\n    hexagonData[17][8],\n    hexagonData[18][7],\n  ];\n\n  for (const hex of islandHexes) {\n    hex.island = true;\n  }\n}","import { jsPDF } from \"jspdf\";\nimport { useEffect, useRef } from \"react\";\nimport { useContext } from \"./getContext\";\n\nconst App = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const canvas = canvasRef.current;\n  let ctx;\n  ctx = useContext(canvasRef)!;\n  \n  useEffect(() => {\n    if (canvas) {\n      ctx = canvas.getContext('2d');\n    }\n  }, [canvas]);\n\n  const pdf = () => {\n    const doc = new jsPDF({\n      orientation: \"landscape\",\n      unit: 'mm',\n      format: [297, 210] // A4\n    });\n  \n    doc.text(\"Rory is cool\", 10, 10);\n    if (canvasRef.current) {\n      doc.addImage(canvasRef.current, 'PNG', 58, 37, 180, 135); // 180 x 135mm - same scale as Canvas\n      doc.save(\"tester.pdf\");\n    }\n  }\n\n  return (\n    <div className=\"content\">\n      <canvas ref={canvasRef} width={800} height={600} />\n      <button onClick={pdf}>Save as PDF</button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}