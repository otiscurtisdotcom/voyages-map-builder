{"version":3,"sources":["types.tsx","getIslands.tsx","getContext.tsx","getSevenSeas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HexItems","getIslands","grid","sevenSeas","checkHex","hex","flat","some","seaHex","col","row","islandHexes","push","splice","forEach","sea","island","randomHex","Math","floor","random","length","straightPair","second","rowNumber","colNumber","diagonalPair","useContext","canvasRef","useState","hexagonData","setHexagonData","ctx","setCtx","setSevenSeas","islands","setIslands","useEffect","current","getContext","rows","rowIndex","totalColumns","show","getBlankGrid","getSevenSeas","flatSeas","flatIslands","addStart","addDread","addRandomStuff","drawGrid","possIslands","start","filter","dread","flatGrid","BARREL","FRUIT","GEM","HIDE","SAILOR","SPICE","item","i","hexItems","entries","isEvenRow","hexagon","size","Xcenter","Ycenter","beginPath","moveTo","cos","sin","lineTo","PI","strokeStyle","lineWidth","fillStyle","stroke","fill","image","Image","src","process","onload","drawImage","restore","App","useRef","canvas","className","ref","width","height","onClick","doc","jsPDF","orientation","unit","format","text","addImage","save","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a49e9a47.chunk.js","sourcesContent":["export enum HexItems {\n  BARREL = 'barrel',\n  FRUIT = 'fruit',\n  SPICE = 'spice',\n  HIDE = 'hide',\n  GEM = 'gem',\n  SAILOR = 'sailor',\n}\n\nexport interface Hexagon {\n  show: boolean,\n  sevenSeas?: boolean,\n  start?: boolean,\n  dread?: boolean,\n  island?: boolean,\n  hexItems?: HexItems,\n  row: number,\n  col: number,\n}","import { Hexagon } from \"./types\";\n\nconst coinFlip = () => {\n  return Math.random() > 0.5;\n}\n\nexport const getIslands = (grid: Hexagon[][], sevenSeas: Hexagon[][]) => {\n  \n  const checkHex = (hex: Hexagon): boolean => {\n    const allSeas = sevenSeas.flat();\n    return allSeas.some((seaHex: Hexagon) => \n      hex.col === seaHex.col && hex.row === seaHex.row\n    )\n  }\n\n  let islandHexes: Hexagon[][] = [];\n  islandHexes.push(\n    [grid[10][0]],\n    [grid[10][2]],\n    [grid[10][4]],\n    [grid[10][6]],\n    [grid[10][8]],\n  );\n\n  sevenSeas.splice(3,1);\n  sevenSeas.forEach((sea) => {\n    const island = [];\n    \n    const randomHex = sea[Math.floor(Math.random() * sea.length)];\n    island.push(randomHex);\n\n    const straightPair = () => {\n      if (randomHex.row > 18) {\n        return grid[randomHex.row - 2][randomHex.col];\n      } else if (randomHex.row < 2) {\n        return grid[randomHex.row + 2][randomHex.col];\n      } else {\n        return checkHex(grid[randomHex.row + 2][randomHex.col]) ?\n          grid[randomHex.row + 2][randomHex.col] :\n          grid[randomHex.row - 2][randomHex.col];\n      }\n    }\n\n    const diagonalPair = () => {\n      const rowNumber = randomHex.row > 19 ?\n                        randomHex.row - 1 :\n                        randomHex.row + 1;\n\n      const colNumber = randomHex.col > 7 ?\n                        randomHex.col - 1 :\n                          randomHex.row % 2 ?\n                          randomHex.col :\n                          randomHex.col + 1;\n\n      if (checkHex(grid[rowNumber][colNumber])) {\n        return grid[rowNumber][colNumber];\n      }\n    }\n\n    let second = coinFlip() ? diagonalPair() : straightPair();\n\n    if (!second) {\n      second = straightPair();\n    }\n\n    island.push(second);\n    islandHexes.push(island);\n  });\n\n  // Add second single island to top sea\n  if (islandHexes[6][0].col > 3) {\n    islandHexes.push([grid[1][3]]);\n  } else {\n    islandHexes.push([grid[2][5]]);\n  }\n\n  // Add second single island to bottom sea\n  if (islandHexes[9][0].col > 3) {\n    islandHexes.push([grid[19][3]]);\n  } else {\n    islandHexes.push([grid[18][5]]);\n  }\n\n  return islandHexes;\n}","import { RefObject, useEffect, useState } from \"react\";\nimport { getIslands } from \"./getIslands\";\nimport { getSevenSeas } from \"./getSevenSeas\";\nimport { Hexagon, HexItems } from \"./types\";\n\nconst getBlankGrid = (): Hexagon[][] => {\n  const rows = [];\n  for (var rowIndex = 0; rowIndex < 21; rowIndex++) {\n    const isEvenRow = rowIndex % 2;\n    const totalColumns = isEvenRow ? 10 : 9;\n    const row = [];\n    for (let col=0; col<totalColumns; col++) {\n      const hex: Hexagon = {\n        show: true,\n        row: rowIndex,\n        col,\n      }\n      row.push(hex);\n    }\n    rows.push(row);\n  }\n  rows[0][0].show = false;\n  rows[1][0].show = false;\n  rows[0][8].show = false;\n  rows[1][9].show = false;\n  rows[19][0].show = false;\n  rows[20][0].show = false;\n  rows[19][9].show = false;\n  rows[20][8].show = false;\n  return rows;\n}\n\nexport const useContext = (canvasRef: RefObject<HTMLCanvasElement>) => {\n  const [hexagonData, setHexagonData] = useState<Hexagon[][]>();\n  const [ctx, setCtx] = useState<CanvasRenderingContext2D | null>(null);\n  const [sevenSeas, setSevenSeas] = useState<Hexagon[][]>();\n  const [islands, setIslands] = useState<Hexagon[][]>();\n\n  useEffect(() => {\n    if (canvasRef.current && canvasRef.current.getContext('2d')) {\n      setCtx(canvasRef!.current.getContext('2d'));\n    }\n    setHexagonData(getBlankGrid());\n  }, []);\n\n  useEffect(() => {\n    if (hexagonData) {\n      setSevenSeas(getSevenSeas(hexagonData));\n    }\n  }, [hexagonData]);\n\n  useEffect(() => {\n    if (sevenSeas && hexagonData) {\n      // Set seven seas\n      const flatSeas = sevenSeas.flat();\n      for (const seaHex of flatSeas) {\n        seaHex.sevenSeas = true;\n      };\n      setIslands(getIslands(hexagonData, sevenSeas));\n    }\n  }, [sevenSeas]);\n\n  useEffect(() => {\n    if (islands) {\n      const flatIslands = islands.flat();\n      for (const islandHex of flatIslands) {\n        islandHex.island = true;\n      }\n\n      addStart();\n      addDread();\n\n      addRandomStuff();\n      drawGrid();\n    }\n  }, [islands])\n\n  const addStart = () => {\n    let possIslands = islands;\n    possIslands?.splice(2, 1);\n    const randomHex = Math.floor(Math.random() * 3);\n    if (possIslands) {\n      possIslands[randomHex][0].start = true;\n    };\n  }\n\n  const addDread = () => {\n    let possIslands = islands;\n    possIslands?.splice(5, 8);\n    possIslands = possIslands?.filter((island) => !island[0].start);\n    const randomHex = Math.floor(Math.random() * 3);\n    if (possIslands) {\n      possIslands[randomHex][0].dread = true;\n    };\n  }\n\n  const addRandomStuff = () => {\n    const numberOfItems = 3;\n    const flatGrid = hexagonData!.flat();\n\n    for (const item of [HexItems.BARREL, HexItems.FRUIT, HexItems.GEM, HexItems.HIDE, HexItems.SAILOR, HexItems.SPICE]) {  \n      for (let i=0; i<numberOfItems;) {\n        const randomHex = flatGrid[Math.floor(Math.random() * flatGrid.length)];\n        if (randomHex.show && !randomHex.hexItems && !randomHex.dread && !randomHex.island && !randomHex.start) {\n          randomHex.hexItems = item;\n          i++;\n        }\n      }\n    }\n  };\n\n  const drawGrid = () => {\n    if (ctx) {\n      for (const [rowIndex, row] of hexagonData!.entries()) {\n        const isEvenRow = rowIndex % 2;\n        const totalColumns = isEvenRow ? 10 : 9;\n        \n        for (let col=0; col<totalColumns; col++) {\n          const hexagon = row[col];\n          const numberOfSides = 6,\n          size = 25,\n          Xcenter = isEvenRow ?\n                    col * (size * 3) + size :\n                    col * (size * 3) + (size * 2.5),\n          \n          Ycenter = rowIndex * (size * 0.86) + size;\n    \n          ctx.beginPath();\n          ctx.moveTo (Xcenter + size * Math.cos(0), Ycenter +  size *  Math.sin(0));          \n    \n          for (let i = 1; i <= numberOfSides; i++) {\n            ctx.lineTo (Xcenter + size * Math.cos(i * 2 * Math.PI / numberOfSides), Ycenter + size * Math.sin(i * 2 * Math.PI / numberOfSides));\n          }\n    \n          ctx.strokeStyle = \"#000000\";\n          ctx.lineWidth = 1;\n          ctx.fillStyle = \"#33ddee\";\n    \n          if (hexagon.sevenSeas) {\n            ctx.fillStyle = \"#99eeff\";\n          }\n          \n          if (hexagon.island) {\n            ctx.fillStyle = \"#ddcc33\";\n          }\n          \n          if (hexagon.dread) {\n            ctx.fillStyle = \"#ff0000\";\n          }\n\n          if (hexagon.start) {\n            ctx.fillStyle = \"#eedd99\";\n          }\n\n          if (hexagon.show) {\n            ctx.stroke();\n            ctx.fill();\n          }\n    \n          if (hexagon.hexItems) {\n            const image = new Image();\n            image.src = `${process.env.PUBLIC_URL}/${hexagon.hexItems}.png`;\n            image.onload = () => {\n              // @ts-ignore: Unreachable code error\n              ctx.drawImage(image, Xcenter - 10, Ycenter - 14, 18, 26);\n            }\n          }\n    \n          ctx.restore();\n        };\n      }\n    }\n  }\n\n  return ctx;\n}\n\nexport default useContext;\n","import { Hexagon } from \"./types\";\n\nexport const getSevenSeas = (hexagonData: Hexagon[][]) => {\n  const ssHexes = [\n    // SEA 1\n    [\n      hexagonData[0][1],\n      hexagonData[1][1],\n      hexagonData[1][2],\n      hexagonData[2][0],\n      hexagonData[2][1],\n      hexagonData[3][0],\n      hexagonData[3][1],\n      hexagonData[3][2],\n      hexagonData[4][0],\n      hexagonData[4][1],\n      hexagonData[5][0],\n      hexagonData[5][1],\n      hexagonData[6][0],\n    ],\n    // SEA 2\n    [\n      hexagonData[0][3],\n      hexagonData[0][4],\n      hexagonData[1][3],\n      hexagonData[1][4],\n      hexagonData[1][5],\n      hexagonData[2][3],\n      hexagonData[2][4],\n      hexagonData[2][5],\n      hexagonData[3][4],\n      hexagonData[3][5],\n      hexagonData[4][3],\n      hexagonData[4][4],\n      hexagonData[4][5],\n    ],\n    // SEA 3\n    [\n      hexagonData[0][7],\n      hexagonData[1][7],\n      hexagonData[1][8],\n      hexagonData[2][6],\n      hexagonData[2][7],\n      hexagonData[2][8],\n      hexagonData[3][7],\n      hexagonData[3][8],\n      hexagonData[3][9],\n      hexagonData[4][7],\n      hexagonData[4][8],\n      hexagonData[5][8],\n      hexagonData[6][8],\n    ],\n    // SEA 4\n    [\n      hexagonData[8][4],\n      hexagonData[9][4],\n      hexagonData[9][5],\n      hexagonData[10][4],\n      hexagonData[11][4],\n      hexagonData[11][5],\n      hexagonData[12][4],\n    ],\n    // SEA 5\n    [\n      hexagonData[14][0],\n      hexagonData[15][0],\n      hexagonData[15][1],\n      hexagonData[16][0],\n      hexagonData[16][1],\n      hexagonData[17][0],\n      hexagonData[17][1],\n      hexagonData[17][2],\n      hexagonData[18][0],\n      hexagonData[18][1],\n      hexagonData[19][1],\n      hexagonData[19][2],\n      hexagonData[20][1],\n    ],\n    // SEA 6\n    [\n      hexagonData[16][3],\n      hexagonData[16][4],\n      hexagonData[17][3],\n      hexagonData[17][4],\n      hexagonData[17][5],\n      hexagonData[18][3],\n      hexagonData[18][4],\n      hexagonData[18][5],\n      hexagonData[19][3],\n      hexagonData[19][4],\n      hexagonData[19][5],\n      hexagonData[20][3],\n      hexagonData[20][4],\n      hexagonData[20][5],\n    ],\n    // SEA 7\n    [\n      hexagonData[14][8],\n      hexagonData[15][8],\n      hexagonData[16][7],\n      hexagonData[16][8],\n      hexagonData[17][7],\n      hexagonData[17][8],\n      hexagonData[18][6],\n      hexagonData[18][7],\n      hexagonData[18][8],\n      hexagonData[19][7],\n      hexagonData[19][8],\n      hexagonData[20][7],\n    ],\n  ];\n\n  return ssHexes;\n}","import { jsPDF } from \"jspdf\";\nimport { useEffect, useRef } from \"react\";\nimport { useContext } from \"./getContext\";\n\nconst App = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const canvas = canvasRef.current;\n  let ctx;\n  ctx = useContext(canvasRef)!;\n  \n  useEffect(() => {\n    if (canvas) {\n      ctx = canvas.getContext('2d');\n    }\n  }, [canvas]);\n\n  const pdf = () => {\n    const doc = new jsPDF({\n      orientation: \"landscape\",\n      unit: 'mm',\n      format: [297, 210] // A4\n    });\n  \n    doc.text(\"Rory is cool\", 10, 10);\n    if (canvasRef.current) {\n      doc.addImage(canvasRef.current, 'PNG', 58, 37, 180, 135); // 180 x 135mm - same scale as Canvas\n      doc.save(\"tester.pdf\");\n    }\n  }\n\n  return (\n    <div className=\"content\">\n      <canvas ref={canvasRef} width={800} height={600} />\n      <button onClick={pdf}>Save as PDF</button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}